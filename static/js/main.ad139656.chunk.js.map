{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","setText","imageUrl","useEffect","ExtractTextFromImage","worker","createWorker","logger","m","console","log","a","load","loadLanguage","initialize","recognize","data","terminate","Fragment","className","href","getUploadParams","url","onChangeStatus","status","meta","alert","previewUrl","maxFiles","multiple","canCancel","accept","inputContent","files","extra","reject","styles","dropzoneActive","borderColor","dropzoneReject","backgroundColor","inputLabel","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4TA2GeA,MA/Ff,WAAgB,IAAD,EAEaC,mBAAS,MAFtB,mBAEJC,EAFI,KAEEC,EAFF,OAIQF,mBAAS,MAArBG,EAJI,oBAOXC,qBAAU,WACU,MAAZD,GACAE,OAIR,IAAMC,EAASC,uBAAa,CACxBC,OAAQ,SAACC,GAAD,OAAOC,QAAQC,IAAIF,MAGzBJ,EAAoB,uCAAG,WAAOF,GAAP,iBAAAS,EAAA,sEACnBN,EAAOO,OADY,uBAEnBP,EAAOQ,aAAa,OAFD,uBAGnBR,EAAOS,WAAW,OAHC,uBASfT,EAAOU,UAAUb,GATF,uBAMjBF,EANiB,EAKrBgB,KACIhB,KAIRC,EAAQD,GAViB,UAWnBK,EAAOY,YAXY,4CAAH,sDAkC1B,OAAS,kBAAC,IAAMC,SAAP,KAEL,yBAAKC,UAAY,4DACjB,uBAAGA,UAAY,eAAeC,KAAO,KAArC,eAAyD,6BACzD,2FAIA,kBAAC,IAAD,CAAUC,gBA3BU,WACpB,MAAO,CACHC,IAAK,6BA4BTC,eAxBuB,SAAC,EAEzBC,GAAY,IADXC,EACU,EADVA,KAEe,qBAAXD,GACAE,MAAM,YACNzB,EAAQ,iBACRG,EAAqBqB,EAAKE,aACR,YAAXH,GACPE,MAAM,yBAmBVE,SACI,EAEJC,UACI,EAEJC,WACI,EAEJC,OAAS,mCACTC,aACI,SAACC,EAAMC,GAAP,OAAkBA,EAAMC,OAAS,2CAA6C,oBAElFC,OACI,CACIC,eAAgB,CACZC,YAAa,SAEjBC,eAAgB,CAAED,YAAa,MAAOE,gBAAiB,QACnDC,WAAY,SAACR,EAAOC,GAAR,OAAmBA,EAAMC,OAAS,CAAEO,MAAO,OAAU,OAjCxE,KAoCD,yBAAKvB,UAAY,8BAAjB,IACAnB,EADA,OCvFQ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.ad139656.chunk.js","sourcesContent":["import React, {\n    useEffect,\n    useState\n} from 'react';\nimport './App.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport {\n    createWorker\n} from \"tesseract.js\";\n\n\n\nfunction App() {\n\n    const [text, setText] = useState(null);\n\n    const [imageUrl] = useState(null);\n\n\n    useEffect(() => {\n        if (imageUrl != null) {\n            ExtractTextFromImage();\n        }\n    });\n\n    const worker = createWorker({\n        logger: (m) => console.log(m),\n    });\n\n    const ExtractTextFromImage = async (imageUrl) => {\n        await worker.load();\n        await worker.loadLanguage(\"eng\");\n        await worker.initialize(\"eng\");\n        const {\n            data: {\n                text\n            },\n\n        } = await worker.recognize(imageUrl);\n        setText(text);\n        await worker.terminate();\n    };\n\n\n    const getUploadParams = () => {\n        return {\n            url: 'https://httpbin.org/post'\n        }\n    }\n\n    const handleChangeStatus = ({\n        meta\n    }, status) => {\n        if (status === 'headers_received') {\n            alert(\"Uploaded\");\n            setText(\"Reconizing...\");\n            ExtractTextFromImage(meta.previewUrl);\n        } else if (status === 'aborted') {\n            alert(\"Something went wrong\")\n        }\n    }\n\n\n    return ( <React.Fragment>\n\n        <nav className = \"navbar navbar-light bg-light justify-content-center mt-3\" >\n        <a className = \"navbar-brand\" href = \"/\" > React OCR </a><br/ >\n        <p> Optical Character Recognition with React and Tesseract.js </p>  \n        </nav >\n\n\n        <Dropzone getUploadParams = {\n            getUploadParams\n        }\n        onChangeStatus = {\n            handleChangeStatus\n        }\n        maxFiles = {\n            1\n        }\n        multiple = {\n            false\n        }\n        canCancel = {\n            false\n        }\n        accept = \"image/jpeg, image/png, image/jpg\"\n        inputContent = {\n            (files,extra) => (extra.reject ? 'Only PNG and JPG Image files are allowed' : 'Drop  image here')\n        }\n        styles = {\n            {\n                dropzoneActive: {\n                    borderColor: 'green'\n                },\n                dropzoneReject: { borderColor: 'red', backgroundColor: '#DAA' },\n                    inputLabel: (files, extra) => (extra.reject ? { color: 'red' } : {}),\n            }\n        }\n        />  <div className = \"container text-center pt-5\" > {\n            text\n        } </div> \n\n        </React.Fragment>\n    )\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}